;Programa Soma de dois números de 1 dígito
;Introdução ao Assembly
;Author: nome, FEAP
;Version: nome completo curso Engenharia da Computação
SYS_EXIT        equ 1
SYS_READ        equ 3
SYS_WRITE       equ 4
STDIN           equ 0
STDOUT          equ 1

section .data           ;seção de dados iniciada
                        ;chamada (mensagem) para informar 1o número
    msg1 db 'Insira um dígito', 0xa, 0xd
    len1 equ $ -msg1
                        ;chamada (mensagem) para informar 2o número
    msg2 db 'Insira o segundo dígito', 0xa, 0xd
    len2 equ $ -msg2
                        ;chamada (mensagem) para informar resultado (soma)
    msg3 db 'A soma é:'
    len3 equ $ -msg3
   
section .bss            ;seção de declaração de variáveis a serem                          processadas
    num1 resb 2
    num2 resb 2
    res resb STDOUT
   
section .text           ;seção de execução
    global _start
   
_start:                 ;iniciando programação

                        ;imprime a string msg1
    mov eax, SYS_WRITE
    mov ebx, STDOUT
    mov ecx, msg1
    mov edx, len1
    int 0x80
                        ;lê o primeiro número
    mov eax, SYS_READ
    mov ebx, STDIN
    mov ecx, num1
    mov edx, 2
    int 0x80
                        ;imprime a string msg2
    mov eax, SYS_WRITE
    mov ebx, STDOUT
    mov ecx, msg2
    mov edx, len2
    int 0x80
                        ;lê o segundo número
    mov eax, SYS_READ
    mov ebx, STDIN
    mov ecx, num2
    mov edx, 2
    int 0x80
   
    ;move o primeiro número para o registro eax e subtrai o ASCII 0 para converter para o DEC (decimal)
    mov eax, [num1]
    sub eax , '0'
   
    ;move o segundo número para o registro ebx e subtrai o ASCII 0 para converter para o DEC (decimal)
    mov ebx, [num2]
    sub ebx, '0'
   
    ;soma eax e ebx
    add eax, ebx
   
    ;adiciona '0' para converter de decimal para ASCII
    add eax, '0'
   
    ;armazenar a soma na localização de memória 'res'
    mov [res], eax
   
    ;imprime a string msg3
    mov eax, SYS_WRITE
    mov ebx, STDOUT
    mov ecx, msg3
    mov edx, len3
    int 0x80
   
    ;imprime o resultado
    mov eax, SYS_WRITE
    mov ebx, STDOUT
    mov ecx, res
    mov edx, 2
    int 0x80
